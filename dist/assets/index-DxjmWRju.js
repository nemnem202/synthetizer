(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))t(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&t(a)}).observe(document,{childList:!0,subtree:!0});function r(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function t(o){if(o.ep)return;o.ep=!0;const i=r(o);fetch(o.href,i)}})();const q=512,A=2,p=q*A;class m{static instance;refCount=0;audioCtx;workletNode;rustWorker;shared_sound_buffer;constructor(){const e=p*Float32Array.BYTES_PER_ELEMENT,r=Int32Array.BYTES_PER_ELEMENT*3;this.shared_sound_buffer=new SharedArrayBuffer(r+e);const o=new Int32Array(this.shared_sound_buffer,0,3).subarray(0,1);Atomics.store(o,0,1)}static getInstance(){return this.instance||(this.instance=new m),this.instance}async init(e,r){try{if(this.audioCtx)return null;console.log("[SOUND ENGINE] creation of rust worker..."),this.rustWorker=new Worker(new URL("/assets/rustWorker-DoK6MbUz.js",import.meta.url),{type:"module",name:"rustWorker"}),this.rustWorker.onmessage=i=>{i.data.type==="module_end_init"&&(console.log("[SOUND ENGINE] worker module init end, init wasm..."),console.log("MIDI buffer:",e),this.rustWorker.postMessage({type:"init_wasm",sharedBuffer:this.shared_sound_buffer,ringBufferSize:p,midi_queue_buffer:e,osc_queue_buffer:r}))},this.audioCtx=new AudioContext({sampleRate:44100}),await this.audioCtx.resume();const t="/audio_worket_manager.js";console.log("[AUDIO ENGINE] Loading AudioWorklet module from:",t),await this.audioCtx.audioWorklet.addModule(t),console.log("[AUDIO ENGINE] AudioWorklet module successfully loaded"),this.workletNode=new AudioWorkletNode(this.audioCtx,"sound-processor",{outputChannelCount:[2],processorOptions:{bufferSize:q,ringBufferSize:p,sharedBuffer:this.shared_sound_buffer}}),this.workletNode.connect(this.audioCtx.destination);let o=null;return this.workletNode.port.onmessage=i=>{if(i.data.type==="log"&&i.data.message==="[AUDIO WORKLET] buffer requested"){const a=performance.now();if(o!==null){const c=a-o;console.log(`Intervalle depuis dernier buffer request: ${c.toFixed(2)} ms`)}o=a}else i.data.type==="log"&&console.log(i.data.message)},this.rustWorker}catch(t){return console.error("[AUDIO ENGINE]",t),null}}release(){this.refCount--,this.refCount<=0&&(console.log("stop to audio context"),this.workletNode&&this.workletNode.disconnect(),this.audioCtx.close(),this.rustWorker.terminate(),this.audioCtx=null,this.workletNode=null,this.rustWorker=null,m.instance=null)}}const L=4,x=64,N=x*L,T=8,y=100,k=y*T;var l=(n=>(n[n.NONE=0]="NONE",n[n.ATTACK=1]="ATTACK",n[n.RELEASE=2]="RELEASE",n[n.DECAY=3]="DECAY",n[n.SUSTAIN=4]="SUSTAIN",n[n.GAIN=5]="GAIN",n[n.DELAY=6]="DELAY",n[n.PITCH=7]="PITCH",n[n.PHASE=8]="PHASE",n[n.WAVEFORM=9]="WAVEFORM",n))(l||{});class s{static soundEngine;static midi_queue_buffer;static midi_queue_array;static midi_write_index;static osc_queue_buffer;static osc_queue_array;static osc_write_index;nmbr_of_oscillators=0;constructor(){s.soundEngine=m.getInstance(),s.midi_queue_buffer=new SharedArrayBuffer(N),s.init_midi_queue(),s.init_osc_queue()}static init_midi_queue(){const e=2*Int32Array.BYTES_PER_ELEMENT;s.midi_queue_buffer=new SharedArrayBuffer(e+N),s.midi_write_index=new Int32Array(s.midi_queue_buffer,0,2),s.midi_queue_array=new Uint8Array(s.midi_queue_buffer,e)}static init_osc_queue(){const e=2*Int32Array.BYTES_PER_ELEMENT;s.osc_queue_buffer=new SharedArrayBuffer(e+k),s.osc_write_index=new Int32Array(s.osc_queue_buffer,0,2),s.osc_queue_array=new Uint8Array(s.osc_queue_buffer,e)}async init(){await s.soundEngine.init(s.midi_queue_buffer,s.osc_queue_buffer)}static playNote(e){s.writeToMidiQueue(1,e.value,e.velocity??100)}static stopNote(e){s.writeToMidiQueue(1,e,0)}static writeToMidiQueue(e,r,t){const o=Atomics.load(s.midi_write_index,0),i=Atomics.load(s.midi_write_index,1),a=(o+1)%x;if(a===i){console.warn("Queue MIDI pleine");return}const c=o*L;s.midi_queue_array[c]=e,s.midi_queue_array[c+1]=r,s.midi_queue_array[c+2]=t,s.midi_queue_array[c+3]=0,Atomics.store(s.midi_write_index,0,a)}static writeToOscQueue(e,r,t,o){t===9||(t===7?o=this.convert_semitone_to_frequency_shift(o):(t===1||t===3||t===2||t===6)&&(o=this.convert_ms_to_sample(o)));const i=Atomics.load(s.osc_write_index,0),a=Atomics.load(s.osc_write_index,1),c=(i+1)%y;if(c===a){console.warn("Queue OSC pleine");return}const u=i*T;s.osc_queue_array[u]=e&255,s.osc_queue_array[u+1]=r&255,s.osc_queue_array[u+2]=t&255,new DataView(s.osc_queue_array.buffer,s.osc_queue_array.byteOffset+u+3,4).setFloat32(0,o,!0),Atomics.store(s.osc_write_index,0,c)}create_oscillator(){const e=this.nmbr_of_oscillators;return s.writeToOscQueue(0,e,0,0),console.log(`Oscillateur ${e} créé`),this.nmbr_of_oscillators++,e}remove_oscillator(e){s.writeToOscQueue(1,e,0,0),console.log(`Oscillateur ${e} supprimé`)}update_oscillator(e,r,t){s.writeToOscQueue(2,e,r,t)}static convert_ms_to_sample(e){return Math.floor(e/1e3*44100)}static convert_sample_to_ms(){}static convert_semitone_to_frequency_shift(e){return Math.pow(2,e/12)}destroy(){s.soundEngine.release()}}class U{midiAccess=null;constructor(){this.requestMidiAccess()}async requestMidiAccess(){try{this.midiAccess=await navigator.requestMIDIAccess({sysex:!1}),this.onMidiSuccess(this.midiAccess)}catch{console.warn("Accès au midi refusé !")}}onMidiSuccess(e){const r=Array.from(e.inputs.values());console.log("[Inputs] :"),console.table(r),r.forEach(t=>{t.onmidimessage=o=>this.handleMidiMessage(o)})}handleMidiMessage(e){if(!e.data)return;const r=e.data[0],t=e.data[1],o=e.data[2];r===153&&o>0?s.playNote({value:t}):(r===137||r===153&&o===0)&&s.stopNote(t)}}const C=["q","z","s","e","d","f","t","g","y","h","u","j"];class D{api;constructor(e){this.api=e;const r=document.createElement("div");r.className="synthcontainer";const t=document.createElement("button");t.addEventListener("click",()=>this.create_oscillator(r)),t.innerText="ajouter un oscillateur",document.body.appendChild(t),document.body.appendChild(r),this.listen_keys()}create_oscillator(e){const r=this.api.create_oscillator(),t=document.createElement("div");t.className="oscContainer";const o=document.createElement("h2");o.innerText=`Oscillator ${r}`;const i=document.createElement("label");i.innerText="Waveform: ";const a=document.createElement("select");["sine","square","sawtooth","triangle"].forEach((b,M)=>{const _=document.createElement("option");_.value=`${M}`,_.text=b,a.appendChild(_)}),a.addEventListener("change",b=>{this.api.update_oscillator(r,l.WAVEFORM,parseInt(a.value))}),t.appendChild(o),t.appendChild(i),t.appendChild(a);const c=this.create_slider(t,"Attack (ms)",200,1e4,1,500),u=this.create_slider(t,"Decay (ms)",200,1e4,1,500),d=this.create_slider(t,"Sustain (%)",0,100,1,50),E=this.create_slider(t,"Release (ms)",0,1e4,1,500),h=this.create_slider(t,"Delay (ms)",0,1e4,1,0),w=this.create_slider(t,"Shift (semitones)",-36,36,1,0),g=this.create_slider(t,"Phase",.05,.95,.05,0),v=this.create_slider(t,"Gain (%)",0,100,1,50);c.addEventListener("change",()=>this.api.update_oscillator(r,l.ATTACK,Number(c.value))),u.addEventListener("change",()=>this.api.update_oscillator(r,l.DECAY,Number(u.value))),d.addEventListener("change",()=>this.api.update_oscillator(r,l.SUSTAIN,Number(d.value))),E.addEventListener("change",()=>this.api.update_oscillator(r,l.RELEASE,Number(E.value))),h.addEventListener("change",()=>this.api.update_oscillator(r,l.DELAY,Number(h.value))),w.addEventListener("change",()=>this.api.update_oscillator(r,l.PITCH,Number(w.value))),g.addEventListener("change",()=>this.api.update_oscillator(r,l.PHASE,Number(g.value))),v.addEventListener("change",()=>this.api.update_oscillator(r,l.GAIN,Number(v.value)));const f=document.createElement("button");f.innerText="supprimer",f.addEventListener("click",()=>{t.remove(),this.api.remove_oscillator(r)}),t.appendChild(f),e.appendChild(t)}create_slider=(e,r,t,o,i,a)=>{const c=document.createElement("div");c.className="slider-wrapper";const u=document.createElement("input");u.type="range",u.min=String(t),u.max=String(o),u.step=String(i),u.value=String(a);const d=document.createElement("label");return d.textContent=`${r} ${u.value}`,u.addEventListener("input",()=>d.textContent=`${r} ${u.value}`),c.appendChild(u),c.appendChild(d),e.appendChild(c),u};listen_keys(){let e=[];window.addEventListener("keydown",r=>{const t=C.indexOf(r.key.toLowerCase());t===-1||e.includes(r.key.toLowerCase())||(e.push(r.key.toLowerCase()),s.playNote({value:72+t,velocity:50}))}),window.addEventListener("keyup",r=>{const t=C.indexOf(r.key.toLowerCase());t!==-1&&(e=e.filter(o=>o!==r.key.toLowerCase()),s.stopNote(72+t))})}}new U;document.body.innerHTML=document.body.innerHTML=`
  <div class="synth-presentation">
    <h1>Projet : Synthétiseur Rust / WebAssembly Ultra-Performance</h1>
    <p>
      Découvrez mon projet de <strong>synthétiseur</strong> développé en <strong>Rust</strong> et compilé en <strong>WebAssembly</strong> pour des performances ultra-hautes et un contrôle <em>low-level</em>. Un projet unique : rien de comparable n'a vraiment été fait auparavant !
    </p>
    <p>
      Pour jouer, vous avez deux options : 
      <ul>
        <li>Connecter un contrôleur <strong>MIDI</strong>.</li>
        <li>Utiliser les touches de votre clavier :</li>
      </ul>
      <code>q, z, s, e, d, f, t, g, y, h, u, j</code> <em>(dans l'ordre des demi-tons)</em>
    </p>
    <p>
      Pour commencer, cliquez sur le bouton <strong>"Commencer"</strong> (le bouton sera généré plus tard) afin de créer vos premières sources sonores.
    </p>
    <p>
      Ce synthétiseur sera intégré dans ma prochaine application d'apprentissage de musique en ligne, offrant une expérience interactive et réactive aux utilisateurs.
    </p>
    <p>
      Pour découvrir le projet et suivre son évolution, rendez-vous sur <a href="https://github.com/nemnem202" target="_blank">mon GitHub</a>.
    </p>

        <button id="main_button">Commencer</button>
  </div>

`;const I=document.getElementById("main_button");I&&I.addEventListener("click",()=>{const n=new s;new D(n),n.init()});
